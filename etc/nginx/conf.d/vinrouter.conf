# Check CCRT-Subject Header is not empty
# $http_name arbitrary request header field; the last part of a variable name
# is the field name converted to lower case with dashes replaced by underscores
map $http_CCRT_Subject $ccrtSubject {
    "" ""; # is empty
    default 1; # not empty
}

# Check CN value in CCRT-Subject Header exists and
# set $ccrtSubject_vin to the value CN
# e.g. CN=xxxxxxxxxxxxx
map $http_CCRT_Subject $ccrtSubject_vin {
    default ""; # is empty
    # Case senstive (~) matching
    "~CN=(?<vin>[0-9A-Z]+)[,/]?" $vin; # not empty
}

# Sets routing based on environment returned by vinrouter
# Case-insensitive matching
map $env $upstream {
    default             production;
    "~*PROD"            production;
    "~*ENTERTAINMENT"   ENTERTAINMENT;
    "~*X"               x;

}

# Vinrouter
server {

    listen 80 default_server;
    server_name wapi.example.com example.com "";
    status_zone wapi.example.com_environementhttp;

    # Error responses
    error_page 404 = @400; # Invalid paths are treated as bad requests
    proxy_intercept_errors on; # Do not send backend errors to the client
    include /etc/nginx/api_json_errors.conf; # API client friendly JSON error responses
    default_type application/json; # If no content-type then assume JSON

    # Dedicated logs
    # access_log /var/log/nginx/wapi.example.com.log main_ext; # access logs
    # error_log  /var/log/nginx/wapi.example.com_errors.log info; # error logs

    location / {
        auth_request /get_env_trampoline;
        # r.headersOut['Env']
        auth_request_set $env $sent_http_env;

        # include includes/proxy_headers/proxy_headers.conf;
        # include includes/proxy_headers/keepalive.conf;

        if ($ccrtSubject_vin = "") {
            return 400;
        }

        # Add Proxy Headers 
        include includes/proxy_headers/keepalive.conf;
        include includes/proxy_headers/proxy_headers.conf;

        # use $env determines $upstream
        proxy_pass http://$upstream;

    }

    # this is a workaround location, to get around an nginx limitation
    # which disallows to create a subrequest from a subrequest
    # (auth_request is a subrequest, and the subrequest in js_content will fail),
    # instead we do a proxy_pass connection back to auxillary server
    location = /get_env_trampoline {
        internal; # Internal request only

        # Send header to backend
        # If the value of a header field is an empty string
        # then this field will not be passed to a proxied server:
        proxy_set_header X-Cert-Name $ccrtSubject_vin;

        proxy_pass http://127.0.0.1:8001/get_env;

        # Just send headers no body
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
    }

    # Active Healthcheck
    location @health_check {
        proxy_set_header Host wapi.example.com;
        proxy_pass http://vinrouter;

        health_check interval=5s fails=2 passes=2 uri=/health match=status_json_ok;
        access_log /var/log/nginx/health_check.log main;

        internal; # Internal request only
    }

}

# Localhost loopback that executes NJS subrequest to get environment variable
js_import conf.d/vinrouter.js;
server {
    listen 8001;
    location = /get_env {
        # allow 127.0.0.1;

        # We run the NJS code here, that does a sub request to /env_endpoint
        js_content vinrouter.get_env;
    }

    location = /env_endpoint {
        # internal;
        proxy_pass http://vinrouter/api/vins/$ccrtSubject_vin;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
    }
}